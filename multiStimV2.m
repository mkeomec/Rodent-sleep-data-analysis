function multiStimV2% This is just a prototype to be used for human testing% Subjects are required to press either left arrow or the right arrow% just based on the stimuli they see.% reset: 0 load data from multiStim.dat   1 generate new data% The program generates two files. Both files have a name that is the % date/time when the program is run. The one with .dat suffix is just% numbers that saves the trial information and the subject's response. The% other one has a .log suffix and is intended to be more readable by human.% These two files may not be necessary.% Targets: + is left, - is right%% Changes:%% 	10/25/05: TY added code to lower the probability of inf WOE shapes.ch=['+' '-'];reset=input('Retrieve WOE from File (0)   Generate New WOE (1) :');if reset    'Generate New WOE Data'        % Make a backup copy of previous WOE data	fid = fopen('multiStim_new.dat','r');    if (fid ~= -1)        fclose(fid);        CopyFile('multiStim_new.dat','multiStim_new.bak');    end    	% number of shapes?	nstim=input('How many stimulus types (4..10)? (default=10): ');	if isempty(nstim)|nstim<4|nstim>10		nstim=10;	end	% Shuffling the WOEs and assign them to each shape.    possibleWoe = [999, -999, 9, -9, 7, -7, 5, -5, 3, -3, 1, -1];    stimWoe = possibleWoe(randperm(nstim));         % Save WOEs	fid = fopen('multiStim_new.dat','w');	fprintf(fid,'%d\n',nstim);	fprintf(fid,'%f\n',stimWoe(1:nstim));	fclose(fid);else    % Retrieve WOEs from previous saved file    'Retrieve WOE from File' 	fid = fopen('multiStim_new.dat','r');    if (fid == -1)        fprintf('Cannot find multiStim_new.dat\n');        return;    else        nstim=fscanf(fid,'%d',1);        stimWoe=fscanf(fid,'%f',[1 nstim]);        fclose(fid);    endend% Used later to identify trump shapes.  inf = find(abs(stimWoe)==999);% Timing... interval is a exp distr with mean=0.5sectrialLength = 3;stimTime = 3;interval = 0.5;% Number of trials in this roundcount = input('Number of trials (default=100):');if isempty(count) | count<1	count = 100;end%Number of shapes displayed on the screen for each trialnshow = input('Number of stim on screen (default=4):');if isempty(nshow)|count<1	nshow = 4;end%Query for flashing.  Flashing displays a shape for 500 msec, then takes%it away while showing the next shape.  In non-flashing, the shapes stay on%the screen for the entirety of the trial. flash= input('Flash shapes ? Yes (0)        No (1)  :' );% sound file - reward and non-rewardcorrectSound = wavread('correct.wav');wrongSound = wavread('wrong.wav');correctFS = 15*1024;correctBit = 8;wrongFS = 22.05*1024;wrongBit = 16;RT = zeros(1,count);results = RT;woes = RT;choices = RT;%Creates a matrix to hold data from the trial.  The size of the matrix%matches with number of shapes shown per trial and the number of shapes in%the available poolif nshow>=4  data = zeros(count+2,(nshow*2)+4);endif nshow<4  data = zeros(count+2,12);end%Save information about the trial to the "data" matrix.  (number of stim%per trial, number of stim in pool, WOE of shapes)data(1,3:nstim+2)=data(1,3:nstim+2)+stimWoe(1,1:nstim);data(1,1)=data(1,1)+nstim;data(1,2)=data(1,2)+nshow;% Create a log file for data saving purposec = clock;fname = sprintf('%d-%d-%d.%d.%d',c(1:5));fid = fopen([fname '.txt'],'w');if fid == -1	'Error opening log file'	returnelse	fprintf('Saving data into %s\n',fname);endfprintf(fid,'Summary of test run: %d/%d/%d %d:%d\n',c(1:5));fprintf(fid,'Number of Stimulus: %d\nWOEs:\n   ',nstim);fprintf(fid,'%6.2f ',stimWoe);fprintf(fid,'\nTotal trials=%d\n',count);% key codeleft = KbName('left');right = KbName('right');escape = KbName('esc');try% initialize screenwhichScreen = 0;window = Screen(whichScreen,'OpenWindow'); whiteColor = WhiteIndex(window); % pixel value for whiteColorblack = BlackIndex(window); % pixel value for blackgray = (whiteColor+black)/2;inc = whiteColor-gray;Screen(window,'FillRect',gray); rect = Screen(window, 'Rect');Screen(window,'TextSize',60);Screen(window,'TextFont', 'Verdana');% Some constants for shape displaySTIM_SIZE = 80;LENGTH = 4 * STIM_SIZE;GRID_SIZE = 200;STIM_COLOR = whiteColor;% calculate the coordinates of stimulirow=2;col=ceil(nshow/2);xstart=rect(3)/2-col*GRID_SIZE/2;ystart=rect(4)/2-GRID_SIZE;for i=1:row	for j=1:col		x((i-1)*col+j)=xstart+(j-1)*GRID_SIZE;		y((i-1)*col+j)=ystart+(i-1)*GRID_SIZE;	endend% Do some math for drawing shapes later% Here we make the total length of the line segments of all shapes is the same% trianglel=LENGTH/3;s=zeros(3,2);s(2,1)=l;s(3,1)=l/2;s(3,2)=-l*sqrt(3)/2;triangle=s;triangle(:,1)=s(:,1)-l/2+GRID_SIZE/2;triangle(:,2)=s(:,2)+sqrt(3)*l/6+GRID_SIZE/2;%pentagonl=LENGTH/5;s=zeros(5,2);ang=72*pi/180;s(1,1)=l;s(2,1)=l*cos(ang)+l;s(2,2)=-l*sin(ang);s(3,1)=s(2,1)-l*cos(ang/2);s(3,2)=s(2,2)-l*sin(ang/2);s(4,1)=-l*cos(ang);s(4,2)=s(2,2);penta=s;penta(:,1)=penta(:,1)+(GRID_SIZE-l)/2;penta(:,2)=penta(:,2)+GRID_SIZE/2+l/2*tan(54*pi/180);%arcr=LENGTH/(2+pi/3);s=zeros(3,2);s(2,1)=-r/2;s(2,2)=-r*sqrt(3)/2;s(3,1)=r/2;s(3,2)=s(2,2);arc=s;arc(:,1)=s(:,1)+GRID_SIZE/2;arc(:,2)=s(:,2)+sqrt(3)/3*r+GRID_SIZE/2;arcrect=[-r+GRID_SIZE/2 -r+sqrt(3)/3*r+GRID_SIZE/2 r+GRID_SIZE/2 r+sqrt(3)/3*r+GRID_SIZE/2];%star: 4ang=20*pi/180;l=LENGTH/8;r=l*(sin(ang)+cos(ang));s=zeros(8,2);s(1,2)=-r;s(3,1)=-r;s(5,2)=r;s(7,1)=r;s(2,1)=-l*sin(ang);s(2,2)=s(2,1);s(4,1)=s(2,1);s(4,2)=-s(2,2);s(6,1)=s(4,2);s(6,2)=s(4,2);s(8,1)=s(6,1);s(8,2)=s(2,2);star4=s;star4(:,1)=s(:,1)+GRID_SIZE/2;star4(:,2)=s(:,2)+GRID_SIZE/2;% let's gotrials=0;corrects=0;while trials<count    trials=trials+1;	fprintf(fid,'Trial #%3d: ',trials);	trialStart=GetSecs;		% wait till no key is down	[keyIsDown,secs,keyCode] = KbCheck;     while keyIsDown		[keyIsDown,secs,keyCode] = KbCheck; 	end	% start of trial with a cue    Screen(window,'FillRect',gray, rect);	Screen(window,'FillOval',black,[rect(3)/2-2 rect(4)/2-2 rect(3)/2+2 rect(4)/2+2]);	WaitSecs(1);	Screen(window,'FillRect',gray, rect);	WaitSecs(0.5);	% show stim    w=0;    % shuffle the locations of shapes;    shf = randperm(nshow);    h = x(shf);    v = y(shf);    % draw shapes	for i=1:nshow		b=i;        stim=ceil(rand*nstim);                 % Lower the prob that we get inf (trump) WOE shapes to 1/15.        if find(inf==stim)            if (rand*6<=5)                stim=ceil(rand*nstim);            end        end        switch stim            case 1,                e=LENGTH/(2+pi);                Screen(window,'FrameArc',STIM_COLOR,[h(i)+GRID_SIZE/2-e v(i)+GRID_SIZE/2-e/2 h(i)+GRID_SIZE/2+e+1 v(i)+GRID_SIZE/2+3/2*e+1],-90,180,2,2);                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2-e,v(i)+GRID_SIZE/2+e/2,h(i)+GRID_SIZE/2+e,v(i)+GRID_SIZE/2+e/2, 2, 2);            case 2,                e=sqrt(2)*STIM_SIZE/2;                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2-e,v(i)+GRID_SIZE/2,h(i)+GRID_SIZE/2,v(i)+GRID_SIZE/2-e, 2, 2);                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2,v(i)+GRID_SIZE/2-e,h(i)+GRID_SIZE/2+e,v(i)+GRID_SIZE/2, 2, 2);                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2+e,v(i)+GRID_SIZE/2,h(i)+GRID_SIZE/2,v(i)+GRID_SIZE/2+e, 2, 2);                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2-e,v(i)+GRID_SIZE/2,h(i)+GRID_SIZE/2,v(i)+GRID_SIZE/2+e, 2, 2);            case 3,                e=(GRID_SIZE-STIM_SIZE)/2;                Screen(window,'FrameRect',STIM_COLOR,[h(i)+e v(i)+e h(i)+GRID_SIZE-e v(i)+GRID_SIZE-e], 2, 2);            case 4,                s=zeros(3,2);                s(:,1)=triangle(:,1)+h(i);                s(:,2)=triangle(:,2)+v(i);                Screen(window,'Drawline',STIM_COLOR,s(1,1),s(1,2),s(2,1),s(2,2),2,2);                Screen(window,'Drawline',STIM_COLOR,s(1,1),s(1,2),s(3,1),s(3,2),2,2);                Screen(window,'Drawline',STIM_COLOR,s(2,1),s(2,2),s(3,1),s(3,2),2,2);            case 5,				                s=zeros(5,2);                s(:,1)=penta(:,1)+h(i);                s(:,2)=penta(:,2)+v(i);                for i=1:4                    Screen(window,'Drawline',STIM_COLOR,s(i,1),s(i,2),s(i+1,1),s(i+1,2),2,2);                end                Screen(window,'Drawline',STIM_COLOR,s(1,1),s(1,2),s(5,1),s(5,2),2,2);            case 6,                s=zeros(8,2);                s(:,1)=star4(:,1)+h(i);                s(:,2)=star4(:,2)+v(i);                for i=1:7                    Screen(window,'Drawline',STIM_COLOR,s(i,1),s(i,2),s(i+1,1),s(i+1,2),2,2);                end                Screen(window,'Drawline',STIM_COLOR,s(1,1),s(1,2),s(8,1),s(8,2),2,2);            case 7,                Screen(window,'FrameArc',STIM_COLOR,[arcrect(1)+h(i) arcrect(2)+v(i) arcrect(3)+h(i) arcrect(4)+v(i)],-30,60,2,2);                s=zeros(3,2);                s(:,1)=arc(:,1)+h(i);                s(:,2)=arc(:,2)+v(i);                Screen(window,'Drawline',STIM_COLOR,s(1,1),s(1,2),s(2,1),s(2,2),2,2);                Screen(window,'Drawline',STIM_COLOR,s(1,1),s(1,2),s(3,1),s(3,2),2,2);            case 8,                e=LENGTH/8;                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2-e,v(i)+GRID_SIZE/2-sqrt(3)/2*e,h(i)+GRID_SIZE/2+e,v(i)+GRID_SIZE/2-sqrt(3)/2*e, 2, 2);                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2-e,v(i)+GRID_SIZE/2+sqrt(3)/2*e,h(i)+GRID_SIZE/2+e,v(i)+GRID_SIZE/2+sqrt(3)/2*e, 2, 2);                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2-e,v(i)+GRID_SIZE/2-sqrt(3)/2*e,h(i)+GRID_SIZE/2-e/2,v(i)+GRID_SIZE/2, 2, 2);                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2-e,v(i)+GRID_SIZE/2+sqrt(3)/2*e,h(i)+GRID_SIZE/2-e/2,v(i)+GRID_SIZE/2, 2, 2);                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2+e,v(i)+GRID_SIZE/2-sqrt(3)/2*e,h(i)+GRID_SIZE/2+e/2,v(i)+GRID_SIZE/2, 2, 2);                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2+e,v(i)+GRID_SIZE/2+sqrt(3)/2*e,h(i)+GRID_SIZE/2+e/2,v(i)+GRID_SIZE/2, 2, 2);            case 9,                e=LENGTH/(3*pi/2+2*sqrt(2));                Screen(window,'FrameArc',STIM_COLOR,[h(i)+GRID_SIZE/2-e v(i)+GRID_SIZE/2-e h(i)+GRID_SIZE/2+e v(i)+GRID_SIZE/2+e],45, 270,2,2);                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2-e,v(i)+GRID_SIZE/2-e,h(i)+GRID_SIZE/2+e,v(i)+GRID_SIZE/2-e, 2, 2);                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2-e,v(i)+GRID_SIZE/2-e,h(i)+GRID_SIZE/2-sqrt(2)/2*e,v(i)+GRID_SIZE/2-sqrt(2)/2*e, 2, 2);                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2+e,v(i)+GRID_SIZE/2-e,h(i)+GRID_SIZE/2+sqrt(2)/2*e,v(i)+GRID_SIZE/2-sqrt(2)/2*e, 2, 2);            case 10,                e=LENGTH/(5*pi/3+2);                Screen(window,'FrameArc',STIM_COLOR,[h(i)+GRID_SIZE/2-e v(i)+GRID_SIZE/2-e h(i)+GRID_SIZE/2+e+2 v(i)+GRID_SIZE/2+e],-150,300,2, 2);                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2,v(i)+GRID_SIZE/2,h(i)+(GRID_SIZE-e)*0.5,v(i)+0.5*(GRID_SIZE+sqrt(3)*e), 2, 2);                Screen(window,'Drawline',STIM_COLOR,h(i)+GRID_SIZE/2,v(i)+GRID_SIZE/2,h(i)+(GRID_SIZE+e)*0.5,v(i)+0.5*(GRID_SIZE+sqrt(3)*e), 2, 2);            otherwise,                fprintf('wrong stim number');        end      if b<(nshow)          WaitSecs(0.5);          if flash==0          Screen(window,'FillRect',gray,rect);          end      else         end        fprintf(fid, '%d ', stim);		data(trials+1,b)=data(trials+1,b)+stim;         data(trials+1,b+nshow)=data(trials+1,b+nshow)+shf(b);        w = w + stimWoe(stim);    end    % Calculate probability of reward and decide which target will be rewarded	a=10^(w/10);	target=(rand>(a/(1+a)))+1;	fprintf(fid,'\t\t\t(%c) %6.2f',ch(target),w);        % Waiting for a response    start = GetSecs; 	stimOn=1;	trialLength=stimTime+interval;	while (GetSecs - start < trialLength) 		if stimOn & GetSecs-start > stimTime			Screen(window,'FillRect',gray,rect);			stimOn=0;		end        [keyIsDown,secs,keyCode] = KbCheck;         if (keyIsDown & (keyCode(left) | keyCode(right) | keyCode(escape)))         %Subject aborts experiment            if keyCode(escape)                trials=count+1;                break;            end        %Subject chose left               RT(trials) = secs-trialStart;             if keyCode(left)				choices(trials) = 1;				data(trials+1,(2*nshow)+2) = 1;				if target==1					results(trials)=0;                    data(trials+1,(2*nshow)+3)=0; % correct				else					results(trials)=1;                    data(trials+1,(2*nshow)+3)=1;  % type I error				end            else         %Subject chose right				choices(trials)=2;				data(trials+1,(2*nshow)+2) = 0;				if target==2					results(trials)=0;                    data(trials+1,(2*nshow)+3)=0;  % correct				else					results(trials)=2;                    data(trials+1,(2*nshow)+3)=2;  % type II error				end			end			corrects=corrects+(results(trials)==0);                        %Rewards            if results(trials)==0               fprintf (fid,':correct\n');			   sound(correctSound,correctFS);            else               fprintf (fid,':wrong\n');			   sound(wrongSound,wrongFS);            end             data(trials+1,(2*nshow)+1)=RT(trials);            break        end    end         woes(trials)=w;             data(trials+1,(2*nshow)+4)=woes(trials);	    % No response             if GetSecs - start >= trialLength		results(trials)=3;				fprintf (fid,':miss\n');        data(trials+1,(2*nshow)+2:(2*nshow)+3)=-1;        data(trials+1,(2*nshow)+4)=woes(trials);        data(trials+1,(2*nshow)+1)=nan;		sound(wrongSound,wrongFS);	end	while keyIsDown		[keyIsDown,secs,keyCode] = KbCheck; 	end	WaitSecs(interval);end			% All trials doneScreen(window,'Close'); % Below we calculate some statistics%12/2/2005  Currently, the analysis program "multistimanalysis.m" is used to%analyze the data from this experiment% You might not want all of this, especially when you are testing yourself,% but some feedback, such as percentage of correct would be fine.% % Percentage of Correct% fprintf (fid,'Total trials: %d\nCorrect trials: %d\nPercentage: %.2f%%\n',trials,corrects,corrects*100/trials);% fprintf (fid,'Type I error:  %.2f%%\n',sum(results(1:trials)==1)/trials*100);% fprintf (fid,'Type II error: %.2f%%\n',sum(results(1:trials)==2)/trials*100);% % % Reaction time% fprintf (fid,'Mean RT:                  %f\n',mean(RT(1:trials)));% ind=find(results(1:trials)==0);% fprintf (fid,'Mean RT (correct trials): %f\n',mean(RT(ind)));% figure(1)% subplot(2,1,1);% hist(RT(1:trials));% title('Reaction Time Distribution');% subplot(2,1,2);% hist(RT(ind));% title('Reaction Time Distribution (Correct Trials)');% xlabel('RT');% % % Perfomance sorted by WOE% figure(2)% fprintf (fid,'Mean |WOE|: %f\n',mean(abs(woes(1:trials))));% subplot(4,1,1);% hist(woes(1:trials));% title('WOE Distribution');% fprintf (fid,'Mean |WOE| when subject was correct: %f\n', mean(abs(woes(ind))));% subplot(4,1,2);% hist(woes(ind));% title('WOE Distribution (Correct Trials)');% ind=find(choices==1);% fprintf (fid,'Mean WOE when subject went choice 1: %f\n', mean(woes(ind)));% subplot(4,1,3);% hist(woes(ind));% title('WOE Distribution (Choice 1)');% ind=find(choices==2);% fprintf (fid,'Mean WOE when subject went choice 2: %f\n', mean(woes(ind)));% subplot(4,1,4);% hist(woes(ind));% title('WOE Distribution (Choice 2)');% xlabel('Weight of Evidence');% % Logistic fitting to get estimation of the subjective WOE% ind=find(data(:,2+nstim)~=-1);% [beta,llik,pred,se]=logistfit(data(ind,:));% fprintf(fid,'\n\n\nLogistic fitting:\nBeta:\n');% fprintf(fid,'%7.2f ', beta);% fprintf(fid,'\nLog Likelihood:\n');% fprintf(fid,'%7.2f ', llik);% fprintf(fid,'\nPrediction:\n');% fprintf(fid,'%7.2f ', pred);% fprintf(fid,'\nSE:\n');% fprintf(fid,'%7.2f ', se);% Saving the data to filefclose(fid);if flash ==0fid=fopen([fname 'flash.dat'],'w');elsefid=fopen([fname '.dat'],'w');endif fid==-1	'Error opening data file'else    for i=1:count        fprintf(fid,'%d ', data(i,1:end));        fprintf(fid,'\n');    end	fclose(fid);endcatch    lasterr    clear screen;end